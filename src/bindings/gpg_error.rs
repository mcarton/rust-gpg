/* automatically generated by rust-bindgen */

pub type ptrdiff_t = ::libc::c_long;
pub type size_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __clang_max_align_nonce1: ::libc::c_longlong,
    pub __clang_max_align_nonce2: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type max_align_t = Struct_Unnamed1;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed2;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub __count: ::libc::c_int,
    pub __value: Union_Unnamed4,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed4 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed4 {
    pub unsafe fn __wch(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos_t = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos64_t = Struct_Unnamed6;
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__IO_marker {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum___codecvt_result = ::libc::c_uint;
pub const __codecvt_ok: ::libc::c_uint = 0;
pub const __codecvt_partial: ::libc::c_uint = 1;
pub const __codecvt_error: ::libc::c_uint = 2;
pub const __codecvt_noconv: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_FILE {
    pub _flags: ::libc::c_int,
    pub _IO_read_ptr: *mut ::libc::c_char,
    pub _IO_read_end: *mut ::libc::c_char,
    pub _IO_read_base: *mut ::libc::c_char,
    pub _IO_write_base: *mut ::libc::c_char,
    pub _IO_write_ptr: *mut ::libc::c_char,
    pub _IO_write_end: *mut ::libc::c_char,
    pub _IO_buf_base: *mut ::libc::c_char,
    pub _IO_buf_end: *mut ::libc::c_char,
    pub _IO_save_base: *mut ::libc::c_char,
    pub _IO_backup_base: *mut ::libc::c_char,
    pub _IO_save_end: *mut ::libc::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::libc::c_int,
    pub _flags2: ::libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::libc::c_ushort,
    pub _vtable_offset: ::libc::c_char,
    pub _shortbuf: [::libc::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::libc::c_void,
    pub __pad2: *mut ::libc::c_void,
    pub __pad3: *mut ::libc::c_void,
    pub __pad4: *mut ::libc::c_void,
    pub __pad5: size_t,
    pub _mode: ::libc::c_int,
    pub _unused2: [::libc::c_char; 20usize],
}
impl ::std::clone::Clone for Struct__IO_FILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *mut ::libc::c_char,
                  __nbytes: size_t) -> __ssize_t;
pub type __io_write_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *const ::libc::c_char,
                  __n: size_t) -> __ssize_t;
pub type __io_seek_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __pos: *mut __off64_t,
                  __w: ::libc::c_int) -> ::libc::c_int;
pub type __io_close_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void) -> ::libc::c_int;
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
pub type Enum_Unnamed7 = ::libc::c_uint;
pub const GPG_ERR_SOURCE_UNKNOWN: ::libc::c_uint = 0;
pub const GPG_ERR_SOURCE_GCRYPT: ::libc::c_uint = 1;
pub const GPG_ERR_SOURCE_GPG: ::libc::c_uint = 2;
pub const GPG_ERR_SOURCE_GPGSM: ::libc::c_uint = 3;
pub const GPG_ERR_SOURCE_GPGAGENT: ::libc::c_uint = 4;
pub const GPG_ERR_SOURCE_PINENTRY: ::libc::c_uint = 5;
pub const GPG_ERR_SOURCE_SCD: ::libc::c_uint = 6;
pub const GPG_ERR_SOURCE_GPGME: ::libc::c_uint = 7;
pub const GPG_ERR_SOURCE_KEYBOX: ::libc::c_uint = 8;
pub const GPG_ERR_SOURCE_KSBA: ::libc::c_uint = 9;
pub const GPG_ERR_SOURCE_DIRMNGR: ::libc::c_uint = 10;
pub const GPG_ERR_SOURCE_GSTI: ::libc::c_uint = 11;
pub const GPG_ERR_SOURCE_GPA: ::libc::c_uint = 12;
pub const GPG_ERR_SOURCE_KLEO: ::libc::c_uint = 13;
pub const GPG_ERR_SOURCE_G13: ::libc::c_uint = 14;
pub const GPG_ERR_SOURCE_ASSUAN: ::libc::c_uint = 15;
pub const GPG_ERR_SOURCE_TLS: ::libc::c_uint = 17;
pub const GPG_ERR_SOURCE_ANY: ::libc::c_uint = 31;
pub const GPG_ERR_SOURCE_USER_1: ::libc::c_uint = 32;
pub const GPG_ERR_SOURCE_USER_2: ::libc::c_uint = 33;
pub const GPG_ERR_SOURCE_USER_3: ::libc::c_uint = 34;
pub const GPG_ERR_SOURCE_USER_4: ::libc::c_uint = 35;
pub const GPG_ERR_SOURCE_DIM: ::libc::c_uint = 128;
pub type gpg_err_source_t = Enum_Unnamed7;
pub type Enum_Unnamed8 = ::libc::c_uint;
pub const GPG_ERR_NO_ERROR: ::libc::c_uint = 0;
pub const GPG_ERR_GENERAL: ::libc::c_uint = 1;
pub const GPG_ERR_UNKNOWN_PACKET: ::libc::c_uint = 2;
pub const GPG_ERR_UNKNOWN_VERSION: ::libc::c_uint = 3;
pub const GPG_ERR_PUBKEY_ALGO: ::libc::c_uint = 4;
pub const GPG_ERR_DIGEST_ALGO: ::libc::c_uint = 5;
pub const GPG_ERR_BAD_PUBKEY: ::libc::c_uint = 6;
pub const GPG_ERR_BAD_SECKEY: ::libc::c_uint = 7;
pub const GPG_ERR_BAD_SIGNATURE: ::libc::c_uint = 8;
pub const GPG_ERR_NO_PUBKEY: ::libc::c_uint = 9;
pub const GPG_ERR_CHECKSUM: ::libc::c_uint = 10;
pub const GPG_ERR_BAD_PASSPHRASE: ::libc::c_uint = 11;
pub const GPG_ERR_CIPHER_ALGO: ::libc::c_uint = 12;
pub const GPG_ERR_KEYRING_OPEN: ::libc::c_uint = 13;
pub const GPG_ERR_INV_PACKET: ::libc::c_uint = 14;
pub const GPG_ERR_INV_ARMOR: ::libc::c_uint = 15;
pub const GPG_ERR_NO_USER_ID: ::libc::c_uint = 16;
pub const GPG_ERR_NO_SECKEY: ::libc::c_uint = 17;
pub const GPG_ERR_WRONG_SECKEY: ::libc::c_uint = 18;
pub const GPG_ERR_BAD_KEY: ::libc::c_uint = 19;
pub const GPG_ERR_COMPR_ALGO: ::libc::c_uint = 20;
pub const GPG_ERR_NO_PRIME: ::libc::c_uint = 21;
pub const GPG_ERR_NO_ENCODING_METHOD: ::libc::c_uint = 22;
pub const GPG_ERR_NO_ENCRYPTION_SCHEME: ::libc::c_uint = 23;
pub const GPG_ERR_NO_SIGNATURE_SCHEME: ::libc::c_uint = 24;
pub const GPG_ERR_INV_ATTR: ::libc::c_uint = 25;
pub const GPG_ERR_NO_VALUE: ::libc::c_uint = 26;
pub const GPG_ERR_NOT_FOUND: ::libc::c_uint = 27;
pub const GPG_ERR_VALUE_NOT_FOUND: ::libc::c_uint = 28;
pub const GPG_ERR_SYNTAX: ::libc::c_uint = 29;
pub const GPG_ERR_BAD_MPI: ::libc::c_uint = 30;
pub const GPG_ERR_INV_PASSPHRASE: ::libc::c_uint = 31;
pub const GPG_ERR_SIG_CLASS: ::libc::c_uint = 32;
pub const GPG_ERR_RESOURCE_LIMIT: ::libc::c_uint = 33;
pub const GPG_ERR_INV_KEYRING: ::libc::c_uint = 34;
pub const GPG_ERR_TRUSTDB: ::libc::c_uint = 35;
pub const GPG_ERR_BAD_CERT: ::libc::c_uint = 36;
pub const GPG_ERR_INV_USER_ID: ::libc::c_uint = 37;
pub const GPG_ERR_UNEXPECTED: ::libc::c_uint = 38;
pub const GPG_ERR_TIME_CONFLICT: ::libc::c_uint = 39;
pub const GPG_ERR_KEYSERVER: ::libc::c_uint = 40;
pub const GPG_ERR_WRONG_PUBKEY_ALGO: ::libc::c_uint = 41;
pub const GPG_ERR_TRIBUTE_TO_D_A: ::libc::c_uint = 42;
pub const GPG_ERR_WEAK_KEY: ::libc::c_uint = 43;
pub const GPG_ERR_INV_KEYLEN: ::libc::c_uint = 44;
pub const GPG_ERR_INV_ARG: ::libc::c_uint = 45;
pub const GPG_ERR_BAD_URI: ::libc::c_uint = 46;
pub const GPG_ERR_INV_URI: ::libc::c_uint = 47;
pub const GPG_ERR_NETWORK: ::libc::c_uint = 48;
pub const GPG_ERR_UNKNOWN_HOST: ::libc::c_uint = 49;
pub const GPG_ERR_SELFTEST_FAILED: ::libc::c_uint = 50;
pub const GPG_ERR_NOT_ENCRYPTED: ::libc::c_uint = 51;
pub const GPG_ERR_NOT_PROCESSED: ::libc::c_uint = 52;
pub const GPG_ERR_UNUSABLE_PUBKEY: ::libc::c_uint = 53;
pub const GPG_ERR_UNUSABLE_SECKEY: ::libc::c_uint = 54;
pub const GPG_ERR_INV_VALUE: ::libc::c_uint = 55;
pub const GPG_ERR_BAD_CERT_CHAIN: ::libc::c_uint = 56;
pub const GPG_ERR_MISSING_CERT: ::libc::c_uint = 57;
pub const GPG_ERR_NO_DATA: ::libc::c_uint = 58;
pub const GPG_ERR_BUG: ::libc::c_uint = 59;
pub const GPG_ERR_NOT_SUPPORTED: ::libc::c_uint = 60;
pub const GPG_ERR_INV_OP: ::libc::c_uint = 61;
pub const GPG_ERR_TIMEOUT: ::libc::c_uint = 62;
pub const GPG_ERR_INTERNAL: ::libc::c_uint = 63;
pub const GPG_ERR_EOF_GCRYPT: ::libc::c_uint = 64;
pub const GPG_ERR_INV_OBJ: ::libc::c_uint = 65;
pub const GPG_ERR_TOO_SHORT: ::libc::c_uint = 66;
pub const GPG_ERR_TOO_LARGE: ::libc::c_uint = 67;
pub const GPG_ERR_NO_OBJ: ::libc::c_uint = 68;
pub const GPG_ERR_NOT_IMPLEMENTED: ::libc::c_uint = 69;
pub const GPG_ERR_CONFLICT: ::libc::c_uint = 70;
pub const GPG_ERR_INV_CIPHER_MODE: ::libc::c_uint = 71;
pub const GPG_ERR_INV_FLAG: ::libc::c_uint = 72;
pub const GPG_ERR_INV_HANDLE: ::libc::c_uint = 73;
pub const GPG_ERR_TRUNCATED: ::libc::c_uint = 74;
pub const GPG_ERR_INCOMPLETE_LINE: ::libc::c_uint = 75;
pub const GPG_ERR_INV_RESPONSE: ::libc::c_uint = 76;
pub const GPG_ERR_NO_AGENT: ::libc::c_uint = 77;
pub const GPG_ERR_AGENT: ::libc::c_uint = 78;
pub const GPG_ERR_INV_DATA: ::libc::c_uint = 79;
pub const GPG_ERR_ASSUAN_SERVER_FAULT: ::libc::c_uint = 80;
pub const GPG_ERR_ASSUAN: ::libc::c_uint = 81;
pub const GPG_ERR_INV_SESSION_KEY: ::libc::c_uint = 82;
pub const GPG_ERR_INV_SEXP: ::libc::c_uint = 83;
pub const GPG_ERR_UNSUPPORTED_ALGORITHM: ::libc::c_uint = 84;
pub const GPG_ERR_NO_PIN_ENTRY: ::libc::c_uint = 85;
pub const GPG_ERR_PIN_ENTRY: ::libc::c_uint = 86;
pub const GPG_ERR_BAD_PIN: ::libc::c_uint = 87;
pub const GPG_ERR_INV_NAME: ::libc::c_uint = 88;
pub const GPG_ERR_BAD_DATA: ::libc::c_uint = 89;
pub const GPG_ERR_INV_PARAMETER: ::libc::c_uint = 90;
pub const GPG_ERR_WRONG_CARD: ::libc::c_uint = 91;
pub const GPG_ERR_NO_DIRMNGR: ::libc::c_uint = 92;
pub const GPG_ERR_DIRMNGR: ::libc::c_uint = 93;
pub const GPG_ERR_CERT_REVOKED: ::libc::c_uint = 94;
pub const GPG_ERR_NO_CRL_KNOWN: ::libc::c_uint = 95;
pub const GPG_ERR_CRL_TOO_OLD: ::libc::c_uint = 96;
pub const GPG_ERR_LINE_TOO_LONG: ::libc::c_uint = 97;
pub const GPG_ERR_NOT_TRUSTED: ::libc::c_uint = 98;
pub const GPG_ERR_CANCELED: ::libc::c_uint = 99;
pub const GPG_ERR_BAD_CA_CERT: ::libc::c_uint = 100;
pub const GPG_ERR_CERT_EXPIRED: ::libc::c_uint = 101;
pub const GPG_ERR_CERT_TOO_YOUNG: ::libc::c_uint = 102;
pub const GPG_ERR_UNSUPPORTED_CERT: ::libc::c_uint = 103;
pub const GPG_ERR_UNKNOWN_SEXP: ::libc::c_uint = 104;
pub const GPG_ERR_UNSUPPORTED_PROTECTION: ::libc::c_uint = 105;
pub const GPG_ERR_CORRUPTED_PROTECTION: ::libc::c_uint = 106;
pub const GPG_ERR_AMBIGUOUS_NAME: ::libc::c_uint = 107;
pub const GPG_ERR_CARD: ::libc::c_uint = 108;
pub const GPG_ERR_CARD_RESET: ::libc::c_uint = 109;
pub const GPG_ERR_CARD_REMOVED: ::libc::c_uint = 110;
pub const GPG_ERR_INV_CARD: ::libc::c_uint = 111;
pub const GPG_ERR_CARD_NOT_PRESENT: ::libc::c_uint = 112;
pub const GPG_ERR_NO_PKCS15_APP: ::libc::c_uint = 113;
pub const GPG_ERR_NOT_CONFIRMED: ::libc::c_uint = 114;
pub const GPG_ERR_CONFIGURATION: ::libc::c_uint = 115;
pub const GPG_ERR_NO_POLICY_MATCH: ::libc::c_uint = 116;
pub const GPG_ERR_INV_INDEX: ::libc::c_uint = 117;
pub const GPG_ERR_INV_ID: ::libc::c_uint = 118;
pub const GPG_ERR_NO_SCDAEMON: ::libc::c_uint = 119;
pub const GPG_ERR_SCDAEMON: ::libc::c_uint = 120;
pub const GPG_ERR_UNSUPPORTED_PROTOCOL: ::libc::c_uint = 121;
pub const GPG_ERR_BAD_PIN_METHOD: ::libc::c_uint = 122;
pub const GPG_ERR_CARD_NOT_INITIALIZED: ::libc::c_uint = 123;
pub const GPG_ERR_UNSUPPORTED_OPERATION: ::libc::c_uint = 124;
pub const GPG_ERR_WRONG_KEY_USAGE: ::libc::c_uint = 125;
pub const GPG_ERR_NOTHING_FOUND: ::libc::c_uint = 126;
pub const GPG_ERR_WRONG_BLOB_TYPE: ::libc::c_uint = 127;
pub const GPG_ERR_MISSING_VALUE: ::libc::c_uint = 128;
pub const GPG_ERR_HARDWARE: ::libc::c_uint = 129;
pub const GPG_ERR_PIN_BLOCKED: ::libc::c_uint = 130;
pub const GPG_ERR_USE_CONDITIONS: ::libc::c_uint = 131;
pub const GPG_ERR_PIN_NOT_SYNCED: ::libc::c_uint = 132;
pub const GPG_ERR_INV_CRL: ::libc::c_uint = 133;
pub const GPG_ERR_BAD_BER: ::libc::c_uint = 134;
pub const GPG_ERR_INV_BER: ::libc::c_uint = 135;
pub const GPG_ERR_ELEMENT_NOT_FOUND: ::libc::c_uint = 136;
pub const GPG_ERR_IDENTIFIER_NOT_FOUND: ::libc::c_uint = 137;
pub const GPG_ERR_INV_TAG: ::libc::c_uint = 138;
pub const GPG_ERR_INV_LENGTH: ::libc::c_uint = 139;
pub const GPG_ERR_INV_KEYINFO: ::libc::c_uint = 140;
pub const GPG_ERR_UNEXPECTED_TAG: ::libc::c_uint = 141;
pub const GPG_ERR_NOT_DER_ENCODED: ::libc::c_uint = 142;
pub const GPG_ERR_NO_CMS_OBJ: ::libc::c_uint = 143;
pub const GPG_ERR_INV_CMS_OBJ: ::libc::c_uint = 144;
pub const GPG_ERR_UNKNOWN_CMS_OBJ: ::libc::c_uint = 145;
pub const GPG_ERR_UNSUPPORTED_CMS_OBJ: ::libc::c_uint = 146;
pub const GPG_ERR_UNSUPPORTED_ENCODING: ::libc::c_uint = 147;
pub const GPG_ERR_UNSUPPORTED_CMS_VERSION: ::libc::c_uint = 148;
pub const GPG_ERR_UNKNOWN_ALGORITHM: ::libc::c_uint = 149;
pub const GPG_ERR_INV_ENGINE: ::libc::c_uint = 150;
pub const GPG_ERR_PUBKEY_NOT_TRUSTED: ::libc::c_uint = 151;
pub const GPG_ERR_DECRYPT_FAILED: ::libc::c_uint = 152;
pub const GPG_ERR_KEY_EXPIRED: ::libc::c_uint = 153;
pub const GPG_ERR_SIG_EXPIRED: ::libc::c_uint = 154;
pub const GPG_ERR_ENCODING_PROBLEM: ::libc::c_uint = 155;
pub const GPG_ERR_INV_STATE: ::libc::c_uint = 156;
pub const GPG_ERR_DUP_VALUE: ::libc::c_uint = 157;
pub const GPG_ERR_MISSING_ACTION: ::libc::c_uint = 158;
pub const GPG_ERR_MODULE_NOT_FOUND: ::libc::c_uint = 159;
pub const GPG_ERR_INV_OID_STRING: ::libc::c_uint = 160;
pub const GPG_ERR_INV_TIME: ::libc::c_uint = 161;
pub const GPG_ERR_INV_CRL_OBJ: ::libc::c_uint = 162;
pub const GPG_ERR_UNSUPPORTED_CRL_VERSION: ::libc::c_uint = 163;
pub const GPG_ERR_INV_CERT_OBJ: ::libc::c_uint = 164;
pub const GPG_ERR_UNKNOWN_NAME: ::libc::c_uint = 165;
pub const GPG_ERR_LOCALE_PROBLEM: ::libc::c_uint = 166;
pub const GPG_ERR_NOT_LOCKED: ::libc::c_uint = 167;
pub const GPG_ERR_PROTOCOL_VIOLATION: ::libc::c_uint = 168;
pub const GPG_ERR_INV_MAC: ::libc::c_uint = 169;
pub const GPG_ERR_INV_REQUEST: ::libc::c_uint = 170;
pub const GPG_ERR_UNKNOWN_EXTN: ::libc::c_uint = 171;
pub const GPG_ERR_UNKNOWN_CRIT_EXTN: ::libc::c_uint = 172;
pub const GPG_ERR_LOCKED: ::libc::c_uint = 173;
pub const GPG_ERR_UNKNOWN_OPTION: ::libc::c_uint = 174;
pub const GPG_ERR_UNKNOWN_COMMAND: ::libc::c_uint = 175;
pub const GPG_ERR_NOT_OPERATIONAL: ::libc::c_uint = 176;
pub const GPG_ERR_NO_PASSPHRASE: ::libc::c_uint = 177;
pub const GPG_ERR_NO_PIN: ::libc::c_uint = 178;
pub const GPG_ERR_NOT_ENABLED: ::libc::c_uint = 179;
pub const GPG_ERR_NO_ENGINE: ::libc::c_uint = 180;
pub const GPG_ERR_MISSING_KEY: ::libc::c_uint = 181;
pub const GPG_ERR_TOO_MANY: ::libc::c_uint = 182;
pub const GPG_ERR_LIMIT_REACHED: ::libc::c_uint = 183;
pub const GPG_ERR_NOT_INITIALIZED: ::libc::c_uint = 184;
pub const GPG_ERR_MISSING_ISSUER_CERT: ::libc::c_uint = 185;
pub const GPG_ERR_NO_KEYSERVER: ::libc::c_uint = 186;
pub const GPG_ERR_INV_CURVE: ::libc::c_uint = 187;
pub const GPG_ERR_UNKNOWN_CURVE: ::libc::c_uint = 188;
pub const GPG_ERR_DUP_KEY: ::libc::c_uint = 189;
pub const GPG_ERR_AMBIGUOUS: ::libc::c_uint = 190;
pub const GPG_ERR_NO_CRYPT_CTX: ::libc::c_uint = 191;
pub const GPG_ERR_WRONG_CRYPT_CTX: ::libc::c_uint = 192;
pub const GPG_ERR_BAD_CRYPT_CTX: ::libc::c_uint = 193;
pub const GPG_ERR_CRYPT_CTX_CONFLICT: ::libc::c_uint = 194;
pub const GPG_ERR_BROKEN_PUBKEY: ::libc::c_uint = 195;
pub const GPG_ERR_BROKEN_SECKEY: ::libc::c_uint = 196;
pub const GPG_ERR_MAC_ALGO: ::libc::c_uint = 197;
pub const GPG_ERR_FULLY_CANCELED: ::libc::c_uint = 198;
pub const GPG_ERR_UNFINISHED: ::libc::c_uint = 199;
pub const GPG_ERR_BUFFER_TOO_SHORT: ::libc::c_uint = 200;
pub const GPG_ERR_SEXP_INV_LEN_SPEC: ::libc::c_uint = 201;
pub const GPG_ERR_SEXP_STRING_TOO_LONG: ::libc::c_uint = 202;
pub const GPG_ERR_SEXP_UNMATCHED_PAREN: ::libc::c_uint = 203;
pub const GPG_ERR_SEXP_NOT_CANONICAL: ::libc::c_uint = 204;
pub const GPG_ERR_SEXP_BAD_CHARACTER: ::libc::c_uint = 205;
pub const GPG_ERR_SEXP_BAD_QUOTATION: ::libc::c_uint = 206;
pub const GPG_ERR_SEXP_ZERO_PREFIX: ::libc::c_uint = 207;
pub const GPG_ERR_SEXP_NESTED_DH: ::libc::c_uint = 208;
pub const GPG_ERR_SEXP_UNMATCHED_DH: ::libc::c_uint = 209;
pub const GPG_ERR_SEXP_UNEXPECTED_PUNC: ::libc::c_uint = 210;
pub const GPG_ERR_SEXP_BAD_HEX_CHAR: ::libc::c_uint = 211;
pub const GPG_ERR_SEXP_ODD_HEX_NUMBERS: ::libc::c_uint = 212;
pub const GPG_ERR_SEXP_BAD_OCT_CHAR: ::libc::c_uint = 213;
pub const GPG_ERR_LEGACY_KEY: ::libc::c_uint = 222;
pub const GPG_ERR_REQUEST_TOO_SHORT: ::libc::c_uint = 223;
pub const GPG_ERR_REQUEST_TOO_LONG: ::libc::c_uint = 224;
pub const GPG_ERR_OBJ_TERM_STATE: ::libc::c_uint = 225;
pub const GPG_ERR_NO_CERT_CHAIN: ::libc::c_uint = 226;
pub const GPG_ERR_CERT_TOO_LARGE: ::libc::c_uint = 227;
pub const GPG_ERR_INV_RECORD: ::libc::c_uint = 228;
pub const GPG_ERR_BAD_MAC: ::libc::c_uint = 229;
pub const GPG_ERR_UNEXPECTED_MSG: ::libc::c_uint = 230;
pub const GPG_ERR_COMPR_FAILED: ::libc::c_uint = 231;
pub const GPG_ERR_WOULD_WRAP: ::libc::c_uint = 232;
pub const GPG_ERR_FATAL_ALERT: ::libc::c_uint = 233;
pub const GPG_ERR_NO_CIPHER: ::libc::c_uint = 234;
pub const GPG_ERR_MISSING_CLIENT_CERT: ::libc::c_uint = 235;
pub const GPG_ERR_CLOSE_NOTIFY: ::libc::c_uint = 236;
pub const GPG_ERR_TICKET_EXPIRED: ::libc::c_uint = 237;
pub const GPG_ERR_BAD_TICKET: ::libc::c_uint = 238;
pub const GPG_ERR_UNKNOWN_IDENTITY: ::libc::c_uint = 239;
pub const GPG_ERR_BAD_HS_CERT: ::libc::c_uint = 240;
pub const GPG_ERR_BAD_HS_CERT_REQ: ::libc::c_uint = 241;
pub const GPG_ERR_BAD_HS_CERT_VER: ::libc::c_uint = 242;
pub const GPG_ERR_BAD_HS_CHANGE_CIPHER: ::libc::c_uint = 243;
pub const GPG_ERR_BAD_HS_CLIENT_HELLO: ::libc::c_uint = 244;
pub const GPG_ERR_BAD_HS_SERVER_HELLO: ::libc::c_uint = 245;
pub const GPG_ERR_BAD_HS_SERVER_HELLO_DONE: ::libc::c_uint = 246;
pub const GPG_ERR_BAD_HS_FINISHED: ::libc::c_uint = 247;
pub const GPG_ERR_BAD_HS_SERVER_KEX: ::libc::c_uint = 248;
pub const GPG_ERR_BAD_HS_CLIENT_KEX: ::libc::c_uint = 249;
pub const GPG_ERR_BOGUS_STRING: ::libc::c_uint = 250;
pub const GPG_ERR_FORBIDDEN: ::libc::c_uint = 251;
pub const GPG_ERR_KEY_DISABLED: ::libc::c_uint = 252;
pub const GPG_ERR_KEY_ON_CARD: ::libc::c_uint = 253;
pub const GPG_ERR_INV_LOCK_OBJ: ::libc::c_uint = 254;
pub const GPG_ERR_ASS_GENERAL: ::libc::c_uint = 257;
pub const GPG_ERR_ASS_ACCEPT_FAILED: ::libc::c_uint = 258;
pub const GPG_ERR_ASS_CONNECT_FAILED: ::libc::c_uint = 259;
pub const GPG_ERR_ASS_INV_RESPONSE: ::libc::c_uint = 260;
pub const GPG_ERR_ASS_INV_VALUE: ::libc::c_uint = 261;
pub const GPG_ERR_ASS_INCOMPLETE_LINE: ::libc::c_uint = 262;
pub const GPG_ERR_ASS_LINE_TOO_LONG: ::libc::c_uint = 263;
pub const GPG_ERR_ASS_NESTED_COMMANDS: ::libc::c_uint = 264;
pub const GPG_ERR_ASS_NO_DATA_CB: ::libc::c_uint = 265;
pub const GPG_ERR_ASS_NO_INQUIRE_CB: ::libc::c_uint = 266;
pub const GPG_ERR_ASS_NOT_A_SERVER: ::libc::c_uint = 267;
pub const GPG_ERR_ASS_NOT_A_CLIENT: ::libc::c_uint = 268;
pub const GPG_ERR_ASS_SERVER_START: ::libc::c_uint = 269;
pub const GPG_ERR_ASS_READ_ERROR: ::libc::c_uint = 270;
pub const GPG_ERR_ASS_WRITE_ERROR: ::libc::c_uint = 271;
pub const GPG_ERR_ASS_TOO_MUCH_DATA: ::libc::c_uint = 273;
pub const GPG_ERR_ASS_UNEXPECTED_CMD: ::libc::c_uint = 274;
pub const GPG_ERR_ASS_UNKNOWN_CMD: ::libc::c_uint = 275;
pub const GPG_ERR_ASS_SYNTAX: ::libc::c_uint = 276;
pub const GPG_ERR_ASS_CANCELED: ::libc::c_uint = 277;
pub const GPG_ERR_ASS_NO_INPUT: ::libc::c_uint = 278;
pub const GPG_ERR_ASS_NO_OUTPUT: ::libc::c_uint = 279;
pub const GPG_ERR_ASS_PARAMETER: ::libc::c_uint = 280;
pub const GPG_ERR_ASS_UNKNOWN_INQUIRE: ::libc::c_uint = 281;
pub const GPG_ERR_LDAP_GENERAL: ::libc::c_uint = 721;
pub const GPG_ERR_LDAP_ATTR_GENERAL: ::libc::c_uint = 722;
pub const GPG_ERR_LDAP_NAME_GENERAL: ::libc::c_uint = 723;
pub const GPG_ERR_LDAP_SECURITY_GENERAL: ::libc::c_uint = 724;
pub const GPG_ERR_LDAP_SERVICE_GENERAL: ::libc::c_uint = 725;
pub const GPG_ERR_LDAP_UPDATE_GENERAL: ::libc::c_uint = 726;
pub const GPG_ERR_LDAP_E_GENERAL: ::libc::c_uint = 727;
pub const GPG_ERR_LDAP_X_GENERAL: ::libc::c_uint = 728;
pub const GPG_ERR_LDAP_OTHER_GENERAL: ::libc::c_uint = 729;
pub const GPG_ERR_LDAP_X_CONNECTING: ::libc::c_uint = 750;
pub const GPG_ERR_LDAP_REFERRAL_LIMIT: ::libc::c_uint = 751;
pub const GPG_ERR_LDAP_CLIENT_LOOP: ::libc::c_uint = 752;
pub const GPG_ERR_LDAP_NO_RESULTS: ::libc::c_uint = 754;
pub const GPG_ERR_LDAP_CONTROL_NOT_FOUND: ::libc::c_uint = 755;
pub const GPG_ERR_LDAP_NOT_SUPPORTED: ::libc::c_uint = 756;
pub const GPG_ERR_LDAP_CONNECT: ::libc::c_uint = 757;
pub const GPG_ERR_LDAP_NO_MEMORY: ::libc::c_uint = 758;
pub const GPG_ERR_LDAP_PARAM: ::libc::c_uint = 759;
pub const GPG_ERR_LDAP_USER_CANCELLED: ::libc::c_uint = 760;
pub const GPG_ERR_LDAP_FILTER: ::libc::c_uint = 761;
pub const GPG_ERR_LDAP_AUTH_UNKNOWN: ::libc::c_uint = 762;
pub const GPG_ERR_LDAP_TIMEOUT: ::libc::c_uint = 763;
pub const GPG_ERR_LDAP_DECODING: ::libc::c_uint = 764;
pub const GPG_ERR_LDAP_ENCODING: ::libc::c_uint = 765;
pub const GPG_ERR_LDAP_LOCAL: ::libc::c_uint = 766;
pub const GPG_ERR_LDAP_SERVER_DOWN: ::libc::c_uint = 767;
pub const GPG_ERR_LDAP_SUCCESS: ::libc::c_uint = 768;
pub const GPG_ERR_LDAP_OPERATIONS: ::libc::c_uint = 769;
pub const GPG_ERR_LDAP_PROTOCOL: ::libc::c_uint = 770;
pub const GPG_ERR_LDAP_TIMELIMIT: ::libc::c_uint = 771;
pub const GPG_ERR_LDAP_SIZELIMIT: ::libc::c_uint = 772;
pub const GPG_ERR_LDAP_COMPARE_FALSE: ::libc::c_uint = 773;
pub const GPG_ERR_LDAP_COMPARE_TRUE: ::libc::c_uint = 774;
pub const GPG_ERR_LDAP_UNSUPPORTED_AUTH: ::libc::c_uint = 775;
pub const GPG_ERR_LDAP_STRONG_AUTH_RQRD: ::libc::c_uint = 776;
pub const GPG_ERR_LDAP_PARTIAL_RESULTS: ::libc::c_uint = 777;
pub const GPG_ERR_LDAP_REFERRAL: ::libc::c_uint = 778;
pub const GPG_ERR_LDAP_ADMINLIMIT: ::libc::c_uint = 779;
pub const GPG_ERR_LDAP_UNAVAIL_CRIT_EXTN: ::libc::c_uint = 780;
pub const GPG_ERR_LDAP_CONFIDENT_RQRD: ::libc::c_uint = 781;
pub const GPG_ERR_LDAP_SASL_BIND_INPROG: ::libc::c_uint = 782;
pub const GPG_ERR_LDAP_NO_SUCH_ATTRIBUTE: ::libc::c_uint = 784;
pub const GPG_ERR_LDAP_UNDEFINED_TYPE: ::libc::c_uint = 785;
pub const GPG_ERR_LDAP_BAD_MATCHING: ::libc::c_uint = 786;
pub const GPG_ERR_LDAP_CONST_VIOLATION: ::libc::c_uint = 787;
pub const GPG_ERR_LDAP_TYPE_VALUE_EXISTS: ::libc::c_uint = 788;
pub const GPG_ERR_LDAP_INV_SYNTAX: ::libc::c_uint = 789;
pub const GPG_ERR_LDAP_NO_SUCH_OBJ: ::libc::c_uint = 800;
pub const GPG_ERR_LDAP_ALIAS_PROBLEM: ::libc::c_uint = 801;
pub const GPG_ERR_LDAP_INV_DN_SYNTAX: ::libc::c_uint = 802;
pub const GPG_ERR_LDAP_IS_LEAF: ::libc::c_uint = 803;
pub const GPG_ERR_LDAP_ALIAS_DEREF: ::libc::c_uint = 804;
pub const GPG_ERR_LDAP_X_PROXY_AUTH_FAIL: ::libc::c_uint = 815;
pub const GPG_ERR_LDAP_BAD_AUTH: ::libc::c_uint = 816;
pub const GPG_ERR_LDAP_INV_CREDENTIALS: ::libc::c_uint = 817;
pub const GPG_ERR_LDAP_INSUFFICIENT_ACC: ::libc::c_uint = 818;
pub const GPG_ERR_LDAP_BUSY: ::libc::c_uint = 819;
pub const GPG_ERR_LDAP_UNAVAILABLE: ::libc::c_uint = 820;
pub const GPG_ERR_LDAP_UNWILL_TO_PERFORM: ::libc::c_uint = 821;
pub const GPG_ERR_LDAP_LOOP_DETECT: ::libc::c_uint = 822;
pub const GPG_ERR_LDAP_NAMING_VIOLATION: ::libc::c_uint = 832;
pub const GPG_ERR_LDAP_OBJ_CLS_VIOLATION: ::libc::c_uint = 833;
pub const GPG_ERR_LDAP_NOT_ALLOW_NONLEAF: ::libc::c_uint = 834;
pub const GPG_ERR_LDAP_NOT_ALLOW_ON_RDN: ::libc::c_uint = 835;
pub const GPG_ERR_LDAP_ALREADY_EXISTS: ::libc::c_uint = 836;
pub const GPG_ERR_LDAP_NO_OBJ_CLASS_MODS: ::libc::c_uint = 837;
pub const GPG_ERR_LDAP_RESULTS_TOO_LARGE: ::libc::c_uint = 838;
pub const GPG_ERR_LDAP_AFFECTS_MULT_DSAS: ::libc::c_uint = 839;
pub const GPG_ERR_LDAP_VLV: ::libc::c_uint = 844;
pub const GPG_ERR_LDAP_OTHER: ::libc::c_uint = 848;
pub const GPG_ERR_LDAP_CUP_RESOURCE_LIMIT: ::libc::c_uint = 881;
pub const GPG_ERR_LDAP_CUP_SEC_VIOLATION: ::libc::c_uint = 882;
pub const GPG_ERR_LDAP_CUP_INV_DATA: ::libc::c_uint = 883;
pub const GPG_ERR_LDAP_CUP_UNSUP_SCHEME: ::libc::c_uint = 884;
pub const GPG_ERR_LDAP_CUP_RELOAD: ::libc::c_uint = 885;
pub const GPG_ERR_LDAP_CANCELLED: ::libc::c_uint = 886;
pub const GPG_ERR_LDAP_NO_SUCH_OPERATION: ::libc::c_uint = 887;
pub const GPG_ERR_LDAP_TOO_LATE: ::libc::c_uint = 888;
pub const GPG_ERR_LDAP_CANNOT_CANCEL: ::libc::c_uint = 889;
pub const GPG_ERR_LDAP_ASSERTION_FAILED: ::libc::c_uint = 890;
pub const GPG_ERR_LDAP_PROX_AUTH_DENIED: ::libc::c_uint = 891;
pub const GPG_ERR_USER_1: ::libc::c_uint = 1024;
pub const GPG_ERR_USER_2: ::libc::c_uint = 1025;
pub const GPG_ERR_USER_3: ::libc::c_uint = 1026;
pub const GPG_ERR_USER_4: ::libc::c_uint = 1027;
pub const GPG_ERR_USER_5: ::libc::c_uint = 1028;
pub const GPG_ERR_USER_6: ::libc::c_uint = 1029;
pub const GPG_ERR_USER_7: ::libc::c_uint = 1030;
pub const GPG_ERR_USER_8: ::libc::c_uint = 1031;
pub const GPG_ERR_USER_9: ::libc::c_uint = 1032;
pub const GPG_ERR_USER_10: ::libc::c_uint = 1033;
pub const GPG_ERR_USER_11: ::libc::c_uint = 1034;
pub const GPG_ERR_USER_12: ::libc::c_uint = 1035;
pub const GPG_ERR_USER_13: ::libc::c_uint = 1036;
pub const GPG_ERR_USER_14: ::libc::c_uint = 1037;
pub const GPG_ERR_USER_15: ::libc::c_uint = 1038;
pub const GPG_ERR_USER_16: ::libc::c_uint = 1039;
pub const GPG_ERR_MISSING_ERRNO: ::libc::c_uint = 16381;
pub const GPG_ERR_UNKNOWN_ERRNO: ::libc::c_uint = 16382;
pub const GPG_ERR_EOF: ::libc::c_uint = 16383;
pub const GPG_ERR_E2BIG: ::libc::c_uint = 32768;
pub const GPG_ERR_EACCES: ::libc::c_uint = 32769;
pub const GPG_ERR_EADDRINUSE: ::libc::c_uint = 32770;
pub const GPG_ERR_EADDRNOTAVAIL: ::libc::c_uint = 32771;
pub const GPG_ERR_EADV: ::libc::c_uint = 32772;
pub const GPG_ERR_EAFNOSUPPORT: ::libc::c_uint = 32773;
pub const GPG_ERR_EAGAIN: ::libc::c_uint = 32774;
pub const GPG_ERR_EALREADY: ::libc::c_uint = 32775;
pub const GPG_ERR_EAUTH: ::libc::c_uint = 32776;
pub const GPG_ERR_EBACKGROUND: ::libc::c_uint = 32777;
pub const GPG_ERR_EBADE: ::libc::c_uint = 32778;
pub const GPG_ERR_EBADF: ::libc::c_uint = 32779;
pub const GPG_ERR_EBADFD: ::libc::c_uint = 32780;
pub const GPG_ERR_EBADMSG: ::libc::c_uint = 32781;
pub const GPG_ERR_EBADR: ::libc::c_uint = 32782;
pub const GPG_ERR_EBADRPC: ::libc::c_uint = 32783;
pub const GPG_ERR_EBADRQC: ::libc::c_uint = 32784;
pub const GPG_ERR_EBADSLT: ::libc::c_uint = 32785;
pub const GPG_ERR_EBFONT: ::libc::c_uint = 32786;
pub const GPG_ERR_EBUSY: ::libc::c_uint = 32787;
pub const GPG_ERR_ECANCELED: ::libc::c_uint = 32788;
pub const GPG_ERR_ECHILD: ::libc::c_uint = 32789;
pub const GPG_ERR_ECHRNG: ::libc::c_uint = 32790;
pub const GPG_ERR_ECOMM: ::libc::c_uint = 32791;
pub const GPG_ERR_ECONNABORTED: ::libc::c_uint = 32792;
pub const GPG_ERR_ECONNREFUSED: ::libc::c_uint = 32793;
pub const GPG_ERR_ECONNRESET: ::libc::c_uint = 32794;
pub const GPG_ERR_ED: ::libc::c_uint = 32795;
pub const GPG_ERR_EDEADLK: ::libc::c_uint = 32796;
pub const GPG_ERR_EDEADLOCK: ::libc::c_uint = 32797;
pub const GPG_ERR_EDESTADDRREQ: ::libc::c_uint = 32798;
pub const GPG_ERR_EDIED: ::libc::c_uint = 32799;
pub const GPG_ERR_EDOM: ::libc::c_uint = 32800;
pub const GPG_ERR_EDOTDOT: ::libc::c_uint = 32801;
pub const GPG_ERR_EDQUOT: ::libc::c_uint = 32802;
pub const GPG_ERR_EEXIST: ::libc::c_uint = 32803;
pub const GPG_ERR_EFAULT: ::libc::c_uint = 32804;
pub const GPG_ERR_EFBIG: ::libc::c_uint = 32805;
pub const GPG_ERR_EFTYPE: ::libc::c_uint = 32806;
pub const GPG_ERR_EGRATUITOUS: ::libc::c_uint = 32807;
pub const GPG_ERR_EGREGIOUS: ::libc::c_uint = 32808;
pub const GPG_ERR_EHOSTDOWN: ::libc::c_uint = 32809;
pub const GPG_ERR_EHOSTUNREACH: ::libc::c_uint = 32810;
pub const GPG_ERR_EIDRM: ::libc::c_uint = 32811;
pub const GPG_ERR_EIEIO: ::libc::c_uint = 32812;
pub const GPG_ERR_EILSEQ: ::libc::c_uint = 32813;
pub const GPG_ERR_EINPROGRESS: ::libc::c_uint = 32814;
pub const GPG_ERR_EINTR: ::libc::c_uint = 32815;
pub const GPG_ERR_EINVAL: ::libc::c_uint = 32816;
pub const GPG_ERR_EIO: ::libc::c_uint = 32817;
pub const GPG_ERR_EISCONN: ::libc::c_uint = 32818;
pub const GPG_ERR_EISDIR: ::libc::c_uint = 32819;
pub const GPG_ERR_EISNAM: ::libc::c_uint = 32820;
pub const GPG_ERR_EL2HLT: ::libc::c_uint = 32821;
pub const GPG_ERR_EL2NSYNC: ::libc::c_uint = 32822;
pub const GPG_ERR_EL3HLT: ::libc::c_uint = 32823;
pub const GPG_ERR_EL3RST: ::libc::c_uint = 32824;
pub const GPG_ERR_ELIBACC: ::libc::c_uint = 32825;
pub const GPG_ERR_ELIBBAD: ::libc::c_uint = 32826;
pub const GPG_ERR_ELIBEXEC: ::libc::c_uint = 32827;
pub const GPG_ERR_ELIBMAX: ::libc::c_uint = 32828;
pub const GPG_ERR_ELIBSCN: ::libc::c_uint = 32829;
pub const GPG_ERR_ELNRNG: ::libc::c_uint = 32830;
pub const GPG_ERR_ELOOP: ::libc::c_uint = 32831;
pub const GPG_ERR_EMEDIUMTYPE: ::libc::c_uint = 32832;
pub const GPG_ERR_EMFILE: ::libc::c_uint = 32833;
pub const GPG_ERR_EMLINK: ::libc::c_uint = 32834;
pub const GPG_ERR_EMSGSIZE: ::libc::c_uint = 32835;
pub const GPG_ERR_EMULTIHOP: ::libc::c_uint = 32836;
pub const GPG_ERR_ENAMETOOLONG: ::libc::c_uint = 32837;
pub const GPG_ERR_ENAVAIL: ::libc::c_uint = 32838;
pub const GPG_ERR_ENEEDAUTH: ::libc::c_uint = 32839;
pub const GPG_ERR_ENETDOWN: ::libc::c_uint = 32840;
pub const GPG_ERR_ENETRESET: ::libc::c_uint = 32841;
pub const GPG_ERR_ENETUNREACH: ::libc::c_uint = 32842;
pub const GPG_ERR_ENFILE: ::libc::c_uint = 32843;
pub const GPG_ERR_ENOANO: ::libc::c_uint = 32844;
pub const GPG_ERR_ENOBUFS: ::libc::c_uint = 32845;
pub const GPG_ERR_ENOCSI: ::libc::c_uint = 32846;
pub const GPG_ERR_ENODATA: ::libc::c_uint = 32847;
pub const GPG_ERR_ENODEV: ::libc::c_uint = 32848;
pub const GPG_ERR_ENOENT: ::libc::c_uint = 32849;
pub const GPG_ERR_ENOEXEC: ::libc::c_uint = 32850;
pub const GPG_ERR_ENOLCK: ::libc::c_uint = 32851;
pub const GPG_ERR_ENOLINK: ::libc::c_uint = 32852;
pub const GPG_ERR_ENOMEDIUM: ::libc::c_uint = 32853;
pub const GPG_ERR_ENOMEM: ::libc::c_uint = 32854;
pub const GPG_ERR_ENOMSG: ::libc::c_uint = 32855;
pub const GPG_ERR_ENONET: ::libc::c_uint = 32856;
pub const GPG_ERR_ENOPKG: ::libc::c_uint = 32857;
pub const GPG_ERR_ENOPROTOOPT: ::libc::c_uint = 32858;
pub const GPG_ERR_ENOSPC: ::libc::c_uint = 32859;
pub const GPG_ERR_ENOSR: ::libc::c_uint = 32860;
pub const GPG_ERR_ENOSTR: ::libc::c_uint = 32861;
pub const GPG_ERR_ENOSYS: ::libc::c_uint = 32862;
pub const GPG_ERR_ENOTBLK: ::libc::c_uint = 32863;
pub const GPG_ERR_ENOTCONN: ::libc::c_uint = 32864;
pub const GPG_ERR_ENOTDIR: ::libc::c_uint = 32865;
pub const GPG_ERR_ENOTEMPTY: ::libc::c_uint = 32866;
pub const GPG_ERR_ENOTNAM: ::libc::c_uint = 32867;
pub const GPG_ERR_ENOTSOCK: ::libc::c_uint = 32868;
pub const GPG_ERR_ENOTSUP: ::libc::c_uint = 32869;
pub const GPG_ERR_ENOTTY: ::libc::c_uint = 32870;
pub const GPG_ERR_ENOTUNIQ: ::libc::c_uint = 32871;
pub const GPG_ERR_ENXIO: ::libc::c_uint = 32872;
pub const GPG_ERR_EOPNOTSUPP: ::libc::c_uint = 32873;
pub const GPG_ERR_EOVERFLOW: ::libc::c_uint = 32874;
pub const GPG_ERR_EPERM: ::libc::c_uint = 32875;
pub const GPG_ERR_EPFNOSUPPORT: ::libc::c_uint = 32876;
pub const GPG_ERR_EPIPE: ::libc::c_uint = 32877;
pub const GPG_ERR_EPROCLIM: ::libc::c_uint = 32878;
pub const GPG_ERR_EPROCUNAVAIL: ::libc::c_uint = 32879;
pub const GPG_ERR_EPROGMISMATCH: ::libc::c_uint = 32880;
pub const GPG_ERR_EPROGUNAVAIL: ::libc::c_uint = 32881;
pub const GPG_ERR_EPROTO: ::libc::c_uint = 32882;
pub const GPG_ERR_EPROTONOSUPPORT: ::libc::c_uint = 32883;
pub const GPG_ERR_EPROTOTYPE: ::libc::c_uint = 32884;
pub const GPG_ERR_ERANGE: ::libc::c_uint = 32885;
pub const GPG_ERR_EREMCHG: ::libc::c_uint = 32886;
pub const GPG_ERR_EREMOTE: ::libc::c_uint = 32887;
pub const GPG_ERR_EREMOTEIO: ::libc::c_uint = 32888;
pub const GPG_ERR_ERESTART: ::libc::c_uint = 32889;
pub const GPG_ERR_EROFS: ::libc::c_uint = 32890;
pub const GPG_ERR_ERPCMISMATCH: ::libc::c_uint = 32891;
pub const GPG_ERR_ESHUTDOWN: ::libc::c_uint = 32892;
pub const GPG_ERR_ESOCKTNOSUPPORT: ::libc::c_uint = 32893;
pub const GPG_ERR_ESPIPE: ::libc::c_uint = 32894;
pub const GPG_ERR_ESRCH: ::libc::c_uint = 32895;
pub const GPG_ERR_ESRMNT: ::libc::c_uint = 32896;
pub const GPG_ERR_ESTALE: ::libc::c_uint = 32897;
pub const GPG_ERR_ESTRPIPE: ::libc::c_uint = 32898;
pub const GPG_ERR_ETIME: ::libc::c_uint = 32899;
pub const GPG_ERR_ETIMEDOUT: ::libc::c_uint = 32900;
pub const GPG_ERR_ETOOMANYREFS: ::libc::c_uint = 32901;
pub const GPG_ERR_ETXTBSY: ::libc::c_uint = 32902;
pub const GPG_ERR_EUCLEAN: ::libc::c_uint = 32903;
pub const GPG_ERR_EUNATCH: ::libc::c_uint = 32904;
pub const GPG_ERR_EUSERS: ::libc::c_uint = 32905;
pub const GPG_ERR_EWOULDBLOCK: ::libc::c_uint = 32906;
pub const GPG_ERR_EXDEV: ::libc::c_uint = 32907;
pub const GPG_ERR_EXFULL: ::libc::c_uint = 32908;
pub const GPG_ERR_CODE_DIM: ::libc::c_uint = 65536;
pub type gpg_err_code_t = Enum_Unnamed8;
pub type gpg_error_t = ::libc::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub __val: [::libc::c_ulong; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed9;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed10;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::clone::Clone for Struct___pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed11 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::clone::Clone for Struct___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutex_t = Union_Unnamed11;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed12 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed12 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed12;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed13 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed13 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed14 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed13;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed15 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed15 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed15;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed16 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed16 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed17 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __rwelision: ::libc::c_char,
    pub __pad1: [::libc::c_uchar; 7usize],
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed16;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed18 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed18 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed18;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed19 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed19 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed19 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed19;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed20 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed20 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed20 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed20;
pub type gpgrt_ssize_t = ssize_t;
pub type gpgrt_off_t = ::libc::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed21 {
    pub _vers: ::libc::c_long,
    pub u: Union_Unnamed22,
}
impl ::std::clone::Clone for Struct_Unnamed21 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed22 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed22 {
    pub unsafe fn _priv(&mut self) -> *mut [::libc::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _x_align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _xp_align(&mut self) -> *mut *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed22 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed22 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgrt_lock_t = Struct_Unnamed21;
pub enum Struct__gpgrt_stream_internal { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct__gpgrt__stream {
    pub flags: Struct_Unnamed23,
    pub buffer: *mut ::libc::c_uchar,
    pub buffer_size: size_t,
    pub data_len: size_t,
    pub data_offset: size_t,
    pub data_flushed: size_t,
    pub unread_buffer: *mut ::libc::c_uchar,
    pub unread_buffer_size: size_t,
    pub unread_data_len: size_t,
    pub intern: *mut Struct__gpgrt_stream_internal,
}
impl ::std::clone::Clone for Struct__gpgrt__stream {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__gpgrt__stream {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed23 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed23 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgrt_stream_t = *mut Struct__gpgrt__stream;
pub type gpgrt_cookie_read_function_t =
    ::std::option::Option<extern "C" fn(cookie: *mut ::libc::c_void,
                                        buffer: *mut ::libc::c_void,
                                        size: size_t) -> ssize_t>;
pub type gpgrt_cookie_write_function_t =
    ::std::option::Option<extern "C" fn(cookie: *mut ::libc::c_void,
                                        buffer: *const ::libc::c_void,
                                        size: size_t) -> ssize_t>;
pub type gpgrt_cookie_seek_function_t =
    ::std::option::Option<extern "C" fn(cookie: *mut ::libc::c_void,
                                        pos: *mut gpgrt_off_t,
                                        whence: ::libc::c_int)
                              -> ::libc::c_int>;
pub type gpgrt_cookie_close_function_t =
    ::std::option::Option<extern "C" fn(cookie: *mut ::libc::c_void)
                              -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__gpgrt_cookie_io_functions {
    pub func_read: gpgrt_cookie_read_function_t,
    pub func_write: gpgrt_cookie_write_function_t,
    pub func_seek: gpgrt_cookie_seek_function_t,
    pub func_close: gpgrt_cookie_close_function_t,
}
impl ::std::clone::Clone for Struct__gpgrt_cookie_io_functions {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__gpgrt_cookie_io_functions {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgrt_cookie_io_functions_t = Struct__gpgrt_cookie_io_functions;
pub type Enum_gpgrt_syshd_types = ::libc::c_uint;
pub const GPGRT_SYSHD_NONE: ::libc::c_uint = 0;
pub const GPGRT_SYSHD_FD: ::libc::c_uint = 1;
pub const GPGRT_SYSHD_SOCK: ::libc::c_uint = 2;
pub const GPGRT_SYSHD_RVID: ::libc::c_uint = 3;
pub const GPGRT_SYSHD_HANDLE: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__gpgrt_syshd {
    pub _type: Enum_gpgrt_syshd_types,
    pub u: Union_Unnamed24,
}
impl ::std::clone::Clone for Struct__gpgrt_syshd {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__gpgrt_syshd {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed24 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed24 {
    pub unsafe fn fd(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sock(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rvid(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn handle(&mut self) -> *mut *mut ::libc::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed24 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed24 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpgrt_syshd_t = Struct__gpgrt_syshd;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "gpg-error")]
extern "C" {
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
}
#[link(name = "gpg-error")]
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_putc(__c: ::libc::c_int, __fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                        arg3: __gnuc_va_list) -> ::libc::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::libc::c_int, arg3: __ssize_t)
     -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::libc::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int, arg4: ::libc::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE) -> ();
    pub fn remove(__filename: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(__old: *const ::libc::c_char, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn renameat(__oldfd: ::libc::c_int, __old: *const ::libc::c_char,
                    __newfd: ::libc::c_int, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tmpnam_r(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tempnam(__dir: *const ::libc::c_char, __pfx: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fopen(__filename: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::libc::c_char,
                   __modes: *const ::libc::c_char, __stream: *mut FILE)
     -> *mut FILE;
    pub fn fdopen(__fd: ::libc::c_int, __modes: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fmemopen(__s: *mut ::libc::c_void, __len: size_t,
                    __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::libc::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char) -> ();
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                   __modes: ::libc::c_int, __n: size_t) -> ::libc::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                     __size: size_t) -> ();
    pub fn setlinebuf(__stream: *mut FILE) -> ();
    pub fn fprintf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn printf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sprintf(__s: *mut ::libc::c_char,
                   __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vprintf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsprintf(__s: *mut ::libc::c_char, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn snprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                    __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vsnprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                     __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vdprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn dprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn scanf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(__s: *const ::libc::c_char,
                  __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::libc::c_char,
                   __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vscanf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsscanf(__s: *const ::libc::c_char,
                   __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fputc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putchar(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn fputc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putchar_unlocked(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(__stream: *mut FILE) -> ::libc::c_int;
    pub fn putw(__w: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fgets(__s: *mut ::libc::c_char, __n: ::libc::c_int,
                 __stream: *mut FILE) -> *mut ::libc::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                      __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                    __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                   __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::libc::c_char, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn puts(__s: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ungetc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fread(__ptr: *mut ::libc::c_void, __size: size_t, __n: size_t,
                 __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::libc::c_void, __size: size_t, __n: size_t,
                  __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::libc::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::libc::c_void, __size: size_t,
                           __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::libc::c_long,
                 __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::libc::c_long;
    pub fn rewind(__stream: *mut FILE) -> ();
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::libc::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::libc::c_int;
    pub fn clearerr(__stream: *mut FILE) -> ();
    pub fn feof(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::libc::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE) -> ();
    pub fn feof_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn perror(__s: *const ::libc::c_char) -> ();
    pub fn fileno(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn popen(__command: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ctermid(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn flockfile(__stream: *mut FILE) -> ();
    pub fn ftrylockfile(__stream: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(__stream: *mut FILE) -> ();
    pub fn gpg_err_init() -> gpg_error_t;
    pub fn gpg_err_deinit(mode: ::libc::c_int) -> ();
    pub fn gpgrt_set_syscall_clamp(pre:
                                       ::std::option::Option<extern "C" fn()
                                                                 -> ()>,
                                   post:
                                       ::std::option::Option<extern "C" fn()
                                                                 -> ()>)
     -> ();
    pub fn gpgrt_set_alloc_func(f:
                                    ::std::option::Option<extern "C" fn(a:
                                                                            *mut ::libc::c_void,
                                                                        n:
                                                                            size_t)
                                                              ->
                                                                  *mut ::libc::c_void>)
     -> ();
    pub fn gpg_strerror(err: gpg_error_t) -> *const ::libc::c_char;
    pub fn gpg_strerror_r(err: gpg_error_t, buf: *mut ::libc::c_char,
                          buflen: size_t) -> ::libc::c_int;
    pub fn gpg_strsource(err: gpg_error_t) -> *const ::libc::c_char;
    pub fn gpg_err_code_from_errno(err: ::libc::c_int) -> gpg_err_code_t;
    pub fn gpg_err_code_to_errno(code: gpg_err_code_t) -> ::libc::c_int;
    pub fn gpg_err_code_from_syserror() -> gpg_err_code_t;
    pub fn gpg_err_set_errno(err: ::libc::c_int) -> ();
    pub fn gpgrt_check_version(req_version: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn gpg_error_check_version(req_version: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn gpgrt_lock_init(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_lock(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_trylock(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_unlock(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_destroy(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_yield() -> gpg_err_code_t;
    pub fn gpgrt_fopen(path: *const ::libc::c_char,
                       mode: *const ::libc::c_char) -> gpgrt_stream_t;
    pub fn gpgrt_mopen(data: *mut ::libc::c_void, data_n: size_t,
                       data_len: size_t, grow: ::libc::c_uint,
                       func_realloc:
                           ::std::option::Option<extern "C" fn(mem:
                                                                   *mut ::libc::c_void,
                                                               size: size_t)
                                                     -> *mut ::libc::c_void>,
                       func_free:
                           ::std::option::Option<extern "C" fn(mem:
                                                                   *mut ::libc::c_void)
                                                     -> ()>,
                       mode: *const ::libc::c_char) -> gpgrt_stream_t;
    pub fn gpgrt_fopenmem(memlimit: size_t, mode: *const ::libc::c_char)
     -> gpgrt_stream_t;
    pub fn gpgrt_fopenmem_init(memlimit: size_t, mode: *const ::libc::c_char,
                               data: *const ::libc::c_void, datalen: size_t)
     -> gpgrt_stream_t;
    pub fn gpgrt_fdopen(filedes: ::libc::c_int, mode: *const ::libc::c_char)
     -> gpgrt_stream_t;
    pub fn gpgrt_fdopen_nc(filedes: ::libc::c_int,
                           mode: *const ::libc::c_char) -> gpgrt_stream_t;
    pub fn gpgrt_sysopen(syshd: *mut gpgrt_syshd_t,
                         mode: *const ::libc::c_char) -> gpgrt_stream_t;
    pub fn gpgrt_sysopen_nc(syshd: *mut gpgrt_syshd_t,
                            mode: *const ::libc::c_char) -> gpgrt_stream_t;
    pub fn gpgrt_fpopen(fp: *mut FILE, mode: *const ::libc::c_char)
     -> gpgrt_stream_t;
    pub fn gpgrt_fpopen_nc(fp: *mut FILE, mode: *const ::libc::c_char)
     -> gpgrt_stream_t;
    pub fn gpgrt_freopen(path: *const ::libc::c_char,
                         mode: *const ::libc::c_char, stream: gpgrt_stream_t)
     -> gpgrt_stream_t;
    pub fn gpgrt_fopencookie(cookie: *mut ::libc::c_void,
                             mode: *const ::libc::c_char,
                             functions: gpgrt_cookie_io_functions_t)
     -> gpgrt_stream_t;
    pub fn gpgrt_fclose(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_fclose_snatch(stream: gpgrt_stream_t,
                               r_buffer: *mut *mut ::libc::c_void,
                               r_buflen: *mut size_t) -> ::libc::c_int;
    pub fn gpgrt_onclose(stream: gpgrt_stream_t, mode: ::libc::c_int,
                         fnc:
                             ::std::option::Option<extern "C" fn(arg1:
                                                                     gpgrt_stream_t,
                                                                 arg2:
                                                                     *mut ::libc::c_void)
                                                       -> ()>,
                         fnc_value: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn gpgrt_fileno(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_fileno_unlocked(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_syshd(stream: gpgrt_stream_t, syshd: *mut gpgrt_syshd_t)
     -> ::libc::c_int;
    pub fn gpgrt_syshd_unlocked(stream: gpgrt_stream_t,
                                syshd: *mut gpgrt_syshd_t) -> ::libc::c_int;
    pub fn _gpgrt_set_std_fd(no: ::libc::c_int, fd: ::libc::c_int) -> ();
    pub fn _gpgrt_get_std_stream(fd: ::libc::c_int) -> gpgrt_stream_t;
    pub fn gpgrt_flockfile(stream: gpgrt_stream_t) -> ();
    pub fn gpgrt_ftrylockfile(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_funlockfile(stream: gpgrt_stream_t) -> ();
    pub fn gpgrt_feof(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_feof_unlocked(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_ferror(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_ferror_unlocked(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_clearerr(stream: gpgrt_stream_t) -> ();
    pub fn gpgrt_clearerr_unlocked(stream: gpgrt_stream_t) -> ();
    pub fn _gpgrt_pending(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn _gpgrt_pending_unlocked(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_fflush(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_fseek(stream: gpgrt_stream_t, offset: ::libc::c_long,
                       whence: ::libc::c_int) -> ::libc::c_int;
    pub fn gpgrt_fseeko(stream: gpgrt_stream_t, offset: gpgrt_off_t,
                        whence: ::libc::c_int) -> ::libc::c_int;
    pub fn gpgrt_ftell(stream: gpgrt_stream_t) -> ::libc::c_long;
    pub fn gpgrt_ftello(stream: gpgrt_stream_t) -> gpgrt_off_t;
    pub fn gpgrt_rewind(stream: gpgrt_stream_t) -> ();
    pub fn gpgrt_fgetc(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_fputc(c: ::libc::c_int, stream: gpgrt_stream_t)
     -> ::libc::c_int;
    pub fn _gpgrt_getc_underflow(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn _gpgrt_putc_overflow(c: ::libc::c_int, stream: gpgrt_stream_t)
     -> ::libc::c_int;
    pub fn gpgrt_ungetc(c: ::libc::c_int, stream: gpgrt_stream_t)
     -> ::libc::c_int;
    pub fn gpgrt_read(stream: gpgrt_stream_t, buffer: *mut ::libc::c_void,
                      bytes_to_read: size_t, bytes_read: *mut size_t)
     -> ::libc::c_int;
    pub fn gpgrt_write(stream: gpgrt_stream_t, buffer: *const ::libc::c_void,
                       bytes_to_write: size_t, bytes_written: *mut size_t)
     -> ::libc::c_int;
    pub fn gpgrt_write_sanitized(stream: gpgrt_stream_t,
                                 buffer: *const ::libc::c_void,
                                 length: size_t,
                                 delimiters: *const ::libc::c_char,
                                 bytes_written: *mut size_t) -> ::libc::c_int;
    pub fn gpgrt_write_hexstring(stream: gpgrt_stream_t,
                                 buffer: *const ::libc::c_void,
                                 length: size_t, reserved: ::libc::c_int,
                                 bytes_written: *mut size_t) -> ::libc::c_int;
    pub fn gpgrt_fread(ptr: *mut ::libc::c_void, size: size_t, nitems: size_t,
                       stream: gpgrt_stream_t) -> size_t;
    pub fn gpgrt_fwrite(ptr: *const ::libc::c_void, size: size_t,
                        memb: size_t, stream: gpgrt_stream_t) -> size_t;
    pub fn gpgrt_fgets(s: *mut ::libc::c_char, n: ::libc::c_int,
                       stream: gpgrt_stream_t) -> *mut ::libc::c_char;
    pub fn gpgrt_fputs(s: *const ::libc::c_char, stream: gpgrt_stream_t)
     -> ::libc::c_int;
    pub fn gpgrt_fputs_unlocked(s: *const ::libc::c_char,
                                stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_getline(lineptr: *mut *mut ::libc::c_char, n: *mut size_t,
                         stream: gpgrt_stream_t) -> ssize_t;
    pub fn gpgrt_read_line(stream: gpgrt_stream_t,
                           addr_of_buffer: *mut *mut ::libc::c_char,
                           length_of_buffer: *mut size_t,
                           max_length: *mut size_t) -> ssize_t;
    pub fn gpgrt_free(a: *mut ::libc::c_void) -> ();
    pub fn gpgrt_fprintf(stream: gpgrt_stream_t,
                         format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn gpgrt_fprintf_unlocked(stream: gpgrt_stream_t,
                                  format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn gpgrt_printf(format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn gpgrt_printf_unlocked(format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn gpgrt_vfprintf(stream: gpgrt_stream_t,
                          format: *const ::libc::c_char, ap: va_list)
     -> ::libc::c_int;
    pub fn gpgrt_vfprintf_unlocked(stream: gpgrt_stream_t,
                                   format: *const ::libc::c_char, ap: va_list)
     -> ::libc::c_int;
    pub fn gpgrt_setvbuf(stream: gpgrt_stream_t, buf: *mut ::libc::c_char,
                         mode: ::libc::c_int, size: size_t) -> ::libc::c_int;
    pub fn gpgrt_setbuf(stream: gpgrt_stream_t, buf: *mut ::libc::c_char)
     -> ();
    pub fn gpgrt_set_binary(stream: gpgrt_stream_t) -> ();
    pub fn gpgrt_tmpfile() -> gpgrt_stream_t;
    pub fn gpgrt_opaque_set(stream: gpgrt_stream_t,
                            opaque: *mut ::libc::c_void) -> ();
    pub fn gpgrt_opaque_get(stream: gpgrt_stream_t) -> *mut ::libc::c_void;
    pub fn gpgrt_fname_set(stream: gpgrt_stream_t,
                           fname: *const ::libc::c_char) -> ();
    pub fn gpgrt_fname_get(stream: gpgrt_stream_t) -> *const ::libc::c_char;
    pub fn gpgrt_asprintf(r_buf: *mut *mut ::libc::c_char,
                          format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn gpgrt_vasprintf(r_buf: *mut *mut ::libc::c_char,
                           format: *const ::libc::c_char, ap: va_list)
     -> ::libc::c_int;
    pub fn gpgrt_bsprintf(format: *const ::libc::c_char, ...)
     -> *mut ::libc::c_char;
    pub fn gpgrt_vbsprintf(format: *const ::libc::c_char, ap: va_list)
     -> *mut ::libc::c_char;
    pub fn gpgrt_snprintf(buf: *mut ::libc::c_char, bufsize: size_t,
                          format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn gpgrt_vsnprintf(buf: *mut ::libc::c_char, bufsize: size_t,
                           format: *const ::libc::c_char, arg_ptr: va_list)
     -> ::libc::c_int;
}
